import numpy as np


def OBME(Z):
    '''Hard-coded One-Body Matrix Elements (OBME)'''

    v = np.zeros((3,3))
    v[0,0] = -Z*Z/2
    v[1,1] = -Z*Z/8
    v[2,2] = -Z*Z/18
    return v


def TBME(Z):

	'''
	Hardcoded two-body matrix elements (TBME) <pq|V|rs> for project1 in FYS4480.
	Note that these are the radial integrals and do NOT include spin, thus you have 
	to properly anti-symmetrize the TBME's yourself.
	'''

	u 		   = np.zeros((3,3,3,3))
	u[0,0,0,0] = (5*Z)/8.0
	u[0,0,0,1] = (4096*np.sqrt(2)*Z)/64827.0
	u[0,0,0,2] = (1269*np.sqrt(3)*Z)/50000.0
	u[0,0,1,0] = (4096*np.sqrt(2)*Z)/64827.0
	u[0,0,1,1] = (16*Z)/729.0
	u[0,0,1,2] = (110592*np.sqrt(6)*Z)/24137569.0
	u[0,0,2,0] = (1269*np.sqrt(3)*Z)/50000.0
	u[0,0,2,1] = (110592*np.sqrt(6)*Z)/24137569.0
	u[0,0,2,2] = (189*Z)/32768.0
	u[0,1,0,0] = (4096*np.sqrt(2)*Z)/64827.0
	u[0,1,0,1] = (17*Z)/81.0
	u[0,1,0,2] = (1555918848*np.sqrt(6)*Z)/75429903125.0
	u[0,1,1,0] = (16*Z)/729.0
	u[0,1,1,1] = (512*np.sqrt(2)*Z)/84375.0
	u[0,1,1,2] = (2160*np.sqrt(3)*Z)/823543.0
	u[0,1,2,0] = (110592*np.sqrt(6)*Z)/24137569.0
	u[0,1,2,1] = (29943*np.sqrt(3)*Z)/13176688.0
	u[0,1,2,2] = (1216512*np.sqrt(2)*Z)/815730721.0
	u[0,2,0,0] = (1269*np.sqrt(3)*Z)/50000.0
	u[0,2,0,1] = (1555918848*np.sqrt(6)*Z)/75429903125.0
	u[0,2,0,2] = (815*Z)/8192.0
	u[0,2,1,0] = (110592*np.sqrt(6)*Z)/24137569.0
	u[0,2,1,1] = (2160*np.sqrt(3)*Z)/823543.0
	u[0,2,1,2] = (37826560*np.sqrt(2)*Z)/22024729467.0
	u[0,2,2,0] = (189*Z)/32768.0
	u[0,2,2,1] = (1216512*np.sqrt(2)*Z)/815730721.0
	u[0,2,2,2] = (617*Z)/(314928.0*np.sqrt(3))
	u[1,0,0,0] = (4096*np.sqrt(2)*Z)/64827.0
	u[1,0,0,1] = (16*Z)/729.0
	u[1,0,0,2] = (110592*np.sqrt(6)*Z)/24137569.0
	u[1,0,1,0] = (17*Z)/81.0
	u[1,0,1,1] = (512*np.sqrt(2)*Z)/84375.0
	u[1,0,1,2] = (29943*np.sqrt(3)*Z)/13176688.0
	u[1,0,2,0] = (1555918848*np.sqrt(6)*Z)/75429903125.0
	u[1,0,2,1] = (2160*np.sqrt(3)*Z)/823543.0
	u[1,0,2,2] = (1216512*np.sqrt(2)*Z)/815730721.0
	u[1,1,0,0] = (16*Z)/729.0
	u[1,1,0,1] = (512*np.sqrt(2)*Z)/84375.0
	u[1,1,0,2] = (2160*np.sqrt(3)*Z)/823543.0
	u[1,1,1,0] = (512*np.sqrt(2)*Z)/84375.0
	u[1,1,1,1] = (77*Z)/512.0
	u[1,1,1,2] = (5870679552*np.sqrt(6)*Z)/669871503125.0
	u[1,1,2,0] = (2160*np.sqrt(3)*Z)/823543.0
	u[1,1,2,1] = (5870679552*np.sqrt(6)*Z)/669871503125.0
	u[1,1,2,2] = (73008*Z)/9765625.0
	u[1,2,0,0] = (110592*np.sqrt(6)*Z)/24137569.0
	u[1,2,0,1] = (2160*np.sqrt(3)*Z)/823543.0
	u[1,2,0,2] = (37826560*np.sqrt(2)*Z)/22024729467.0
	u[1,2,1,0] = (29943*np.sqrt(3)*Z)/13176688.0
	u[1,2,1,1] = (5870679552*np.sqrt(6)*Z)/669871503125.0
	u[1,2,1,2] = (32857*Z)/390625.0
	u[1,2,2,0] = (1216512*np.sqrt(2)*Z)/815730721.0
	u[1,2,2,1] = (73008*Z)/9765625.0
	u[1,2,2,2] = (6890942464*np.sqrt(2/3)*Z)/1210689028125.0
	u[2,0,0,0] = (1269*np.sqrt(3)*Z)/50000.0
	u[2,0,0,1] = (110592*np.sqrt(6)*Z)/24137569.0
	u[2,0,0,2] = (189*Z)/32768.0
	u[2,0,1,0] = (1555918848*np.sqrt(6)*Z)/75429903125.0
	u[2,0,1,1] = (2160*np.sqrt(3)*Z)/823543.0
	u[2,0,1,2] = (1216512*np.sqrt(2)*Z)/815730721.0
	u[2,0,2,0] = (815*Z)/8192.0
	u[2,0,2,1] = (37826560*np.sqrt(2)*Z)/22024729467.0
	u[2,0,2,2] = (617*Z)/(314928.0*np.sqrt(3))
	u[2,1,0,0] = (110592*np.sqrt(6)*Z)/24137569.0
	u[2,1,0,1] = (29943*np.sqrt(3)*Z)/13176688.0
	u[2,1,0,2] = (1216512*np.sqrt(2)*Z)/815730721.0
	u[2,1,1,0] = (2160*np.sqrt(3)*Z)/823543.0
	u[2,1,1,1] = (5870679552*np.sqrt(6)*Z)/669871503125.0
	u[2,1,1,2] = (73008*Z)/9765625.0
	u[2,1,2,0] = (37826560*np.sqrt(2)*Z)/22024729467.0
	u[2,1,2,1] = (32857*Z)/390625.0
	u[2,1,2,2] = (6890942464*np.sqrt(2/3)*Z)/1210689028125.0
	u[2,2,0,0] = (189*Z)/32768.0
	u[2,2,0,1] = (1216512*np.sqrt(2)*Z)/815730721.0
	u[2,2,0,2] = (617*Z)/(314928.0*np.sqrt(3))
	u[2,2,1,0] = (1216512*np.sqrt(2)*Z)/815730721.0
	u[2,2,1,1] = (73008*Z)/9765625.0
	u[2,2,1,2] = (6890942464*np.sqrt(2/3)*Z)/1210689028125.0
	u[2,2,2,0] = (617*Z)/(314928.0*np.sqrt(3))
	u[2,2,2,1] = (6890942464*np.sqrt(2/3)*Z)/1210689028125.0
	u[2,2,2,2] = (17*Z)/256.0
	return u


def s2r(Z, p,q,r,s, p_s,q_s,r_s,s_s):
    ''' Returning value of matrix element with given 
    quantum number p,q,r,s and spin number p_s,q_s,r_s,s_s.
    Spin up/down is 0/1'''
    
    u = TBME(Z)
    
    if p_s==r_s and q_s==s_s:
        return u[p,q,r,s]
    else:
        return 0
        

def s2r_antisym(Z, p,q,r,s, p_s,q_s,r_s,s_s):
    ''' Returning value of matrix element with given 
    quantum number p,q,r,s and spin number p_s,q_s,r_s,s_s.
    Spin up/down is 0/1.
    Element is now antisymmetric, such that
    <pq|H|rs>AS=<pq|H|rs>-<pq|H|sr>'''
    
    return s2r(Z, p,q,r,s, p_s,q_s,r_s,s_s)-s2r(Z, p,q,s,r, p_s,q_s,s_s,r_s)


if __name__ == '__main__':
    u = TBME(Z=1)
    v = OBME(Z=1)
